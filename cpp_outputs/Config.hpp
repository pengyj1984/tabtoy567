// Generated by github.com/davyxu/tabtoy
// Version: 
// DO NOT EDIT!!
#include <vector>
#include <map>
#include <string>

#include "DataReader.h"
#include "Logger.h"

namespace table
{
	

	

	
	

	

	// Defined in table: Globals
	class WaveGroup
	{
	public:
	
		
		public:
 		int id_ = 0; // 怪物ID
	
		
		public:
 		int count_ = 0; // 怪物數量
	
		
		public:
 		int index_ = 0; // 路線Index
	
		
		public:
 		int test_ = 0; // 测试用
	
		
		public:
 		float time_ = 0.0f; // 間隔
	
		
		public:
 		float delay_ = 0.0f; // 延遲
	

	}; 
	

	

	// Defined in table: Globals
	class Vec3
	{
	public:
	
		
		public:
 		float x_ = 0.0f; 
	
		
		public:
 		float y_ = 0.0f; 
	
		
		public:
 		float z_ = 0.0f; 
	

	}; 
	

	

	// Defined in table: Globals
	class Vec4
	{
	public:
	
		
		public:
 		float x_ = 0.0f; 
	
		
		public:
 		float y_ = 0.0f; 
	
		
		public:
 		float z_ = 0.0f; 
	
		
		public:
 		float v_ = 0.0f; 
	

	}; 
	

	

	// Defined in table: Globals
	class attr
	{
	public:
	
		
		public:
 		int attrid_ = 0; // 屬性id
	
		
		public:
 		int attrnum_ = 0; // 屬性值
	
		
		public:
 		int attrper_ = 0; // 屬性比值
	

	}; 
	

	

	// Defined in table: Globals
	class composeeffect
	{
	public:
	
		
		public:
 		std::string attr_ = ""; 
	
		
		public:
 		int per_ = 0; 
	

	}; 
	

	

	// Defined in table: Globals
	class condition
	{
	public:
	
		/// <summary> 
		/// 條件主體(1:自身;2:怪物ID;3:英雄類型;4:怪物類型;5:路徑;6:龍寶寶;)
		/// </summary>
		public:
 		int mainpart_ = 0; // 條件主體
	
		/// <summary> 
		/// 條件類型(1:血量;2:數量;3:長度;4:波數;)
		/// </summary>
		public:
 		int conditionpattern_ = 0; // 條件類型
	
		/// <summary> 
		/// 判定(1:大於;2:大於等於;3:等於;4:小於等於;5:小於;)
		/// </summary>
		public:
 		int judge_ = 0; // 判定
	
		/// <summary> 
		/// 參數
		/// </summary>
		public:
 		int parameter_ = 0; // 參數
	

	}; 
	

	

	// Defined in table: Globals
	class incident
	{
	public:
	
		/// <summary> 
		/// 主體(1:自身;2:怪物ID;)
		/// </summary>
		public:
 		int mainpart_ = 0; // 主體
	
		/// <summary> 
		/// 事件(1:技能ID;2:說話;)
		/// </summary>
		public:
 		int eventpattern_ = 0; // 事件
	
		/// <summary> 
		/// 參數
		/// </summary>
		public:
 		int parameter_ = 0; // 事件參數
	
		/// <summary> 
		/// 說話，配置文本字串
		/// </summary>
		public:
 		std::string talk_ = ""; // 說話文本
	
		/// <summary> 
		/// 目標(1:無;2:怪物ID;)
		/// </summary>
		public:
 		int target_ = 0; // 目標
	
		/// <summary> 
		/// 參數
		/// </summary>
		public:
 		int targetparameter_ = 0; // 目標參數
	

	}; 
	

	

	// Defined in table: Globals
	class costlist
	{
	public:
	
		
		public:
 		int propertyid_ = 0; // 資產ID
	
		
		public:
 		int num_ = 0; // 數量
	

	}; 
	

	

	// Defined in table: Globals
	class reward
	{
	public:
	
		
		public:
 		int goodsid_ = 0; // 物品ID
	
		
		public:
 		int num_ = 0; // 數量
	

	}; 
	

	

	// Defined in table: Globals
	class Vec2
	{
	public:
	
		
		public:
 		float x_ = 0.0f; 
	
		
		public:
 		float y_ = 0.0f; 
	

	}; 
	

	

	// Defined in table: Globals
	class strike
	{
	public:
	
		/// <summary> 
		/// 條件類型(1:自身血量;2:友方數量;3:暴击触发;4：到达终点触发)
		/// </summary>
		public:
 		int condition_ = 0; // 觸發條件
	
		/// <summary> 
		/// 判定(1:大於;2:大於等於;3:等於;4:小於等於;5:小於;)
		/// </summary>
		public:
 		int judge_ = 0; // 判定
	
		/// <summary> 
		/// 參數
		/// </summary>
		public:
 		int parameter_ = 0; // 參數
	
		/// <summary> 
		/// 暴击触发/到达终点只需要填概率
		/// </summary>
		public:
 		int rate_ = 0; // 觸發概率
	

	}; 
	

	

	// Defined in table: Globals
	class trammelsskill
	{
	public:
	
		
		public:
 		int heronum_ = 0; // 英雄數量
	
		
		public:
 		int skillid_ = 0; // 技能ID
	

	}; 
	

	

	// Defined in table: Globals
	class dropItems
	{
	public:
	
		
		public:
 		int itemid_ = 0; // 物品ID
	
		
		public:
 		int count_ = 0; // 數量
	
		
		public:
 		int weight_ = 0; // 權重
	
		
		public:
 		int minNum_ = 0; // 触发需最小次数
	

	}; 
	

	

	// Defined in table: Globals
	class guideparameter
	{
	public:
	
		
		public:
 		int parameter1_ = 0; 
	
		
		public:
 		std::string parameter2_ = ""; 
	

	}; 
	

	

	// Defined in table: Globals
	class limitparameter
	{
	public:
	
		
		public:
 		int intlimit_ = 0; // 物品使用限制int型
	
		
		public:
 		std::string stringlimit_ = ""; // 物品使用限制string型
	

	}; 
	

	

	// Defined in table: Globals
	class herodata
	{
	public:
	
		
		public:
 		int heroid_ = 0; // 英雄ID
	
		
		public:
 		int herocolor_ = 0; // 英雄品質
	
		
		public:
 		int herolevel_ = 0; // 英雄等級
	
		
		public:
 		int heronum_ = 0; // 英雄數量
	

	}; 
	

	

	// Defined in table: Globals
	class black
	{
	public:
	
		
		public:
 		float x_ = 0.0f; // x軸位移
	
		
		public:
 		float y_ = 0.0f; // y軸位移
	
		
		public:
 		float z_ = 0.0f; // z軸位移
	
		
		public:
 		float speed_ = 0.0f; // 速度
	
		
		public:
 		float duration_ = 0.0f; // 時間（秒）
	

	}; 
	

	

	// Defined in table: Globals
	class numweight
	{
	public:
	
		
		public:
 		int leveupnum_ = 0; // 值与权重
	
		
		public:
 		int weight_ = 0; // 值与权重
	

	}; 
	

	

	// Defined in table: Globals
	class guidecondition
	{
	public:
	
		
		public:
 		std::string cond_ = ""; // 目标
	
		
		public:
 		int num_ = 0; // 目标条件
	
		
		public:
 		int id_ = 0; // 目标ID
	

	}; 
	

	

	// Defined in table: Globals
	class guidePicPos
	{
	public:
	
		
		public:
 		float x_ = 0.0f; 
	
		
		public:
 		float y_ = 0.0f; 
	

	}; 
	

	

	// Defined in table: Globals
	class guidelimit
	{
	public:
	
		
		public:
 		std::string cond_ = ""; // 目标
	
		
		public:
 		int num_ = 0; // 目标条件
	
		
		public:
 		int id_ = 0; // 目标ID
	

	}; 
	

	

	// Defined in table: Globals
	class groups
	{
	public:
	
		
		public:
 		std::string groupid_ = ""; // 掉落组ID
	
		
		public:
 		int num_ = 0; // 掉落组调用次数
	

	}; 
	

	

	// Defined in table: Globals
	class talentrevise
	{
	public:
	
		/// <summary> 
		/// 对应标签页的这个标签
		/// </summary>
		public:
 		std::string name_ = ""; // 修改字段名
	
		/// <summary> 
		/// 修改类型（1:替代；2:新增；3:数值增加；4：数值乘积）新增只应用于数组中
		/// </summary>
		public:
 		int pattern_ = 0; // 修改类型
	
		/// <summary> 
		/// 表示修改的是第几项魔法，可为空，空值表示第一项，只在修改魔法列表时生效 修改的魔法与项数对应
		/// </summary>
		public:
 		int magicnum_ = 0; // 修改的魔法项数
	
		/// <summary> 
		/// 表示要改的是第几个数列，可为空，空值表示不是数组，但是如果是数据类型是数组则不能留空
		/// </summary>
		public:
 		int seriesnum_ = 0; // 数列项数
	
		/// <summary> 
		/// 数列名，可为空，空值表示直接修改数值，无数组名
		/// </summary>
		public:
 		std::string seriesname_ = ""; // 数列名
	
		
		public:
 		std::string parameter_ = ""; // 修改值
	

	}; 
	

	

	// Defined in table: Globals
	class boom
	{
	public:
	
		
		public:
 		int id_ = 0; // 暴击触发的魔法id
	
		/// <summary> 
		/// 可为空，空值表示只要暴击就能触发，不限次数。 在计数时，技能本身那次不算
		/// </summary>
		public:
 		int num_ = 0; // 触发暴击后最多触发次数
	

	}; 
	

	

	// Defined in table: Globals
	class direction
	{
	public:
	
		/// <summary> 
		/// 可为空，空值表示以英雄为中心，找参照点的方向，以12点为1，顺时针，共计8个方向（1-8）
		/// </summary>
		public:
 		int fx_ = 0; // 参照点方向
	
		/// <summary> 
		/// 可为空，空值表示以英雄为中心，找参照点的距离，在这个方向上距英雄几个格子距离的点，为参照点
		/// </summary>
		public:
 		int hero_ = 0; // 参照点距离
	
		/// <summary> 
		/// 可为空，以12点为1，顺时针，共计8个方向（1-8）
		/// </summary>
		public:
 		int fx2_ = 0; // 方向
	
		/// <summary> 
		/// 可为空，参照点方向上的格子数量（连续）
		/// </summary>
		public:
 		int linenum_ = 0; // 格子数量
	

	}; 
	

	

	// Defined in table: Globals
	class cash
	{
	public:
	
		
		public:
 		std::string language_ = ""; // 语言地区
	
		
		public:
 		int pattern_ = 0; // 货币类型
	
		
		public:
 		float price_ = 0.0f; // 价格数值
	

	}; 
	

	

	// Defined in table: Globals
	class HireHeroLimit
	{
	public:
	
		/// <summary> 
		/// 雇佣任务用
		/// </summary>
		public:
 		int herocolor_ = 0; // 英雄品質
	
		
		public:
 		int weight_ = 0; // 權重
	

	}; 
	

	

	// Defined in table: Globals
	class Consumption
	{
	public:
	
		/// <summary> 
		/// 商店，限时购买中，商品筛选机制使用，配置与玩家等级配置表中
		/// </summary>
		public:
 		int id_ = 0; // 物品id
	
		
		public:
 		int value_ = 0; // 消费数值
	

	}; 
	

	

	// Defined in table: Globals
	class typeRandom
	{
	public:
	
		
		public:
 		int attrid_ = 0; // 属性id
	
		
		public:
 		int weight_ = 0; // 权重
	

	}; 
	

	

	// Defined in table: Globals
	class ValueRandom
	{
	public:
	
		/// <summary> 
		/// 如果对应的属性是固定值，则固定加成；如果对应的属性是比例值，则比例加成
		/// </summary>
		public:
 		int num_ = 0; // 属性数值
	
		
		public:
 		int weight_ = 0; // 权重
	

	}; 
	

	

	// Defined in table: FightCommand
	class FightCommandDefine
	{
	public:
	
		/// <summary> 
		/// {1}命令序数
		/// </summary>
		public:
 		int sort_ = 0; 
	
		/// <summary> 
		/// {1}命令描述文本；原则上不超过20个字
		/// </summary>
		public:
 		std::string text_ = ""; 
	
		/// <summary> 
		/// {1}加速倍数
		/// </summary>
		public:
 		int speed_ = 0; 
	

	}; 
	

	

	// Defined in table: GoodsCommand
	class GoodsCommandDefine
	{
	public:
	
		/// <summary> 
		/// {1}命令序数
		/// </summary>
		public:
 		int sort_ = 0; 
	
		/// <summary> 
		/// {1}命令描述文本；原则上不超过20个字；
		/// </summary>
		public:
 		std::string text_ = ""; 
	
		/// <summary> 
		/// {1}获得物品ID、获得物品数量； 注意： 1.物品类型：资产、装备，需要各自单独配置，即不可与其他类型物品在同一个数据格中混合配置； 2.经验，获得的数量不能为负，为负时不生效； 3.装备，涉及到带有唯一ID，原则上配置获得数量不能超过99
		/// </summary>
		public:
 		std::vector<reward> parameter_; 
	

	}; 
	

	

	// Defined in table: HeroCommand
	class HeroCommandDefine
	{
	public:
	
		/// <summary> 
		/// {1}命令序数
		/// </summary>
		public:
 		int sort_ = 0; 
	
		/// <summary> 
		/// {1}命令描述文本；原则上不超过20个字；涉及到带有唯一ID的物品，原则配置获得数量不能超过99，如英雄
		/// </summary>
		public:
 		std::string text_ = ""; 
	
		/// <summary> 
		/// {1}依次为英雄ID、英雄品质、英雄等级、英雄数量； 注意： 1.英雄品质、等级只能配置比初始值高；如果其中一项未填写，则按对应ID的默认数据输入； 2.英雄涉及到带有唯一ID，原则配置获得数量不能超过99
		/// </summary>
		public:
 		std::vector<herodata> parameter_; 
	

	}; 
	

	

	// Defined in table: TestSheet
	class TestSheetDefine
	{
	public:
	
		/// <summary> 
		/// {1}命令序数
		/// </summary>
		public:
 		int sort_ = 0; 
	
		/// <summary> 
		/// {1}命令描述文本；原则上不超过20个字
		/// </summary>
		public:
 		std::string text_ = ""; 
	
		/// <summary> 
		/// {1}封印物ID
		/// </summary>
		public:
 		int sealwareId_ = 0; 
	

	}; 
	

	

	// Defined in table: TestCommand
	class TestCommandDefine
	{
	public:
	
		/// <summary> 
		/// {1}命令序数
		/// </summary>
		public:
 		int sort_ = 0; 
	
		/// <summary> 
		/// {1}命令描述文本；原则上不超过20个字
		/// </summary>
		public:
 		std::string text_ = ""; 
	
		/// <summary> 
		/// {1}跳转的关卡ID
		/// </summary>
		public:
 		int levelId_ = 0; 
	

	}; 
	

	

	// Defined in table: LevelCommand
	class LevelCommandDefine
	{
	public:
	
		/// <summary> 
		/// {1}命令序数
		/// </summary>
		public:
 		int sort_ = 0; 
	
		/// <summary> 
		/// {1}命令描述文本；原则上不超过20个字
		/// </summary>
		public:
 		std::string text_ = ""; 
	
		/// <summary> 
		/// {1}跳转的关卡ID
		/// </summary>
		public:
 		int levelId_ = 0; 
	

	}; 
	

	
	

	// Defined in table: Config	
	class Config
	{
	
	public:
		tabtoy::Logger TableLogger;
	
		
		/// <summary> 
		/// FightCommand
		/// </summary>
		public:
 		std::vector<FightCommandDefine> FightCommand_; 
		
		/// <summary> 
		/// GoodsCommand
		/// </summary>
		public:
 		std::vector<GoodsCommandDefine> GoodsCommand_; 
		
		/// <summary> 
		/// HeroCommand
		/// </summary>
		public:
 		std::vector<HeroCommandDefine> HeroCommand_; 
		
		/// <summary> 
		/// TestSheet
		/// </summary>
		public:
 		std::vector<TestSheetDefine> TestSheet_; 
		
		/// <summary> 
		/// TestCommand
		/// </summary>
		public:
 		std::vector<TestCommandDefine> TestCommand_; 
		
		/// <summary> 
		/// LevelCommand
		/// </summary>
		public:
 		std::vector<LevelCommandDefine> LevelCommand_; 
	
	
		//#region Index code
	 	std::map<int, FightCommandDefine> _FightCommandBysort;
	public:
		class FightCommandDefine* GetFightCommandBysort(int sort, FightCommandDefine* def = nullptr)
        {
            auto ret = _FightCommandBysort.find( sort );
            if ( ret != _FightCommandBysort.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetFightCommandBysort failed, sort: %s", sort);
			}

            return def;
        }
		std::map<int, GoodsCommandDefine> _GoodsCommandBysort;
	public:
		class GoodsCommandDefine* GetGoodsCommandBysort(int sort, GoodsCommandDefine* def = nullptr)
        {
            auto ret = _GoodsCommandBysort.find( sort );
            if ( ret != _GoodsCommandBysort.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetGoodsCommandBysort failed, sort: %s", sort);
			}

            return def;
        }
		std::map<int, HeroCommandDefine> _HeroCommandBysort;
	public:
		class HeroCommandDefine* GetHeroCommandBysort(int sort, HeroCommandDefine* def = nullptr)
        {
            auto ret = _HeroCommandBysort.find( sort );
            if ( ret != _HeroCommandBysort.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetHeroCommandBysort failed, sort: %s", sort);
			}

            return def;
        }
		std::map<int, TestSheetDefine> _TestSheetBysort;
	public:
		class TestSheetDefine* GetTestSheetBysort(int sort, TestSheetDefine* def = nullptr)
        {
            auto ret = _TestSheetBysort.find( sort );
            if ( ret != _TestSheetBysort.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetTestSheetBysort failed, sort: %s", sort);
			}

            return def;
        }
		std::map<int, TestCommandDefine> _TestCommandBysort;
	public:
		class TestCommandDefine* GetTestCommandBysort(int sort, TestCommandDefine* def = nullptr)
        {
            auto ret = _TestCommandBysort.find( sort );
            if ( ret != _TestCommandBysort.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetTestCommandBysort failed, sort: %s", sort);
			}

            return def;
        }
		std::map<int, LevelCommandDefine> _LevelCommandBysort;
	public:
		class LevelCommandDefine* GetLevelCommandBysort(int sort, LevelCommandDefine* def = nullptr)
        {
            auto ret = _LevelCommandBysort.find( sort );
            if ( ret != _LevelCommandBysort.end() )
            {
                return &ret->second;
            }
			
			if ( def == nullptr )
			{
				TableLogger.ErrorLine("GetLevelCommandBysort failed, sort: %s", sort);
			}

            return def;
        }
		
	
		//#endregion
		//#region Deserialize code
		
	public:
		static void Deserialize( Config& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0001:
                	{
						ins.FightCommand_.emplace_back( reader.ReadStruct<FightCommandDefine>(Deserialize) );
                	}
                	break; 
                	case 0xa0002:
                	{
						ins.GoodsCommand_.emplace_back( reader.ReadStruct<GoodsCommandDefine>(Deserialize) );
                	}
                	break; 
                	case 0xa0003:
                	{
						ins.HeroCommand_.emplace_back( reader.ReadStruct<HeroCommandDefine>(Deserialize) );
                	}
                	break; 
                	case 0xa0025:
                	{
						ins.TestSheet_.emplace_back( reader.ReadStruct<TestSheetDefine>(Deserialize) );
                	}
                	break; 
                	case 0xa0024:
                	{
						ins.TestCommand_.emplace_back( reader.ReadStruct<TestCommandDefine>(Deserialize) );
                	}
                	break; 
                	case 0xa0005:
                	{
						ins.LevelCommand_.emplace_back( reader.ReadStruct<LevelCommandDefine>(Deserialize) );
                	}
                	break; 
                }
             }

			
			// Build FightCommand Index
			for( size_t i = 0;i< ins.FightCommand_.size();i++)
			{
				auto element = ins.FightCommand_[i];
				
				ins._FightCommandBysort.emplace(std::make_pair(element.sort_, element));
				
			}
			
			// Build GoodsCommand Index
			for( size_t i = 0;i< ins.GoodsCommand_.size();i++)
			{
				auto element = ins.GoodsCommand_[i];
				
				ins._GoodsCommandBysort.emplace(std::make_pair(element.sort_, element));
				
			}
			
			// Build HeroCommand Index
			for( size_t i = 0;i< ins.HeroCommand_.size();i++)
			{
				auto element = ins.HeroCommand_[i];
				
				ins._HeroCommandBysort.emplace(std::make_pair(element.sort_, element));
				
			}
			
			// Build TestSheet Index
			for( size_t i = 0;i< ins.TestSheet_.size();i++)
			{
				auto element = ins.TestSheet_[i];
				
				ins._TestSheetBysort.emplace(std::make_pair(element.sort_, element));
				
			}
			
			// Build TestCommand Index
			for( size_t i = 0;i< ins.TestCommand_.size();i++)
			{
				auto element = ins.TestCommand_[i];
				
				ins._TestCommandBysort.emplace(std::make_pair(element.sort_, element));
				
			}
			
			// Build LevelCommand Index
			for( size_t i = 0;i< ins.LevelCommand_.size();i++)
			{
				auto element = ins.LevelCommand_[i];
				
				ins._LevelCommandBysort.emplace(std::make_pair(element.sort_, element));
				
			}
			
		}
	public:
		static void Deserialize( WaveGroup& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.id_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.count_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.index_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.test_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.time_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.delay_ = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( Vec3& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50001:
                	{
						ins.x_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.y_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.z_ = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( Vec4& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50001:
                	{
						ins.x_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.y_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.z_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.v_ = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( attr& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.attrid_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.attrnum_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.attrper_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( composeeffect& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60001:
                	{
						ins.attr_ = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.per_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( condition& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.mainpart_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.conditionpattern_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.judge_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.parameter_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( incident& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.mainpart_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.eventpattern_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.parameter_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.talk_ = reader.ReadString();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.target_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.targetparameter_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( costlist& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.propertyid_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.num_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( reward& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.goodsid_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.num_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( Vec2& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50001:
                	{
						ins.x_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.y_ = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( strike& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.condition_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.judge_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.parameter_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.rate_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( trammelsskill& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.heronum_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.skillid_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( dropItems& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.itemid_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.count_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.weight_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.minNum_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( guideparameter& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.parameter1_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.parameter2_ = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( limitparameter& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.intlimit_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.stringlimit_ = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( herodata& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.heroid_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.herocolor_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.herolevel_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.heronum_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( black& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50001:
                	{
						ins.x_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.y_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.z_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.speed_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.duration_ = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( numweight& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.leveupnum_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.weight_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( guidecondition& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60001:
                	{
						ins.cond_ = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.num_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.id_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( guidePicPos& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50001:
                	{
						ins.x_ = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.y_ = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( guidelimit& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60001:
                	{
						ins.cond_ = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.num_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.id_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( groups& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60001:
                	{
						ins.groupid_ = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.num_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( talentrevise& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60001:
                	{
						ins.name_ = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.pattern_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.magicnum_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.seriesnum_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.seriesname_ = reader.ReadString();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.parameter_ = reader.ReadString();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( boom& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.id_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.num_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( direction& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.fx_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.hero_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.fx2_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.linenum_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( cash& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60001:
                	{
						ins.language_ = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.pattern_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.price_ = reader.ReadFloat();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( HireHeroLimit& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.herocolor_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.weight_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( Consumption& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.id_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.value_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( typeRandom& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.attrid_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.weight_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( ValueRandom& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.num_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.weight_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( FightCommandDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.sort_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.text_ = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.speed_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( GoodsCommandDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.sort_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.text_ = reader.ReadString();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.parameter_.emplace_back( reader.ReadStruct<reward>(Deserialize) );
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( HeroCommandDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.sort_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.text_ = reader.ReadString();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.parameter_.emplace_back( reader.ReadStruct<herodata>(Deserialize) );
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( TestSheetDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.sort_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.text_ = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.sealwareId_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( TestCommandDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.sort_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.text_ = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.levelId_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
	public:
		static void Deserialize( LevelCommandDefine& ins, tabtoy::DataReader& reader )
		{
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.sort_ = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.text_ = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.levelId_ = reader.ReadInt32();
                	}
                	break; 
                }
             }

			
		}
		//#endregion
	

	};
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
