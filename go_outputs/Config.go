// Generated by github.com/davyxu/tabtoy
// Version:
// DO NOT EDIT!!
package table

import (
	"fmt"
	"encoding/json"
	"io/ioutil"
)

// Defined in table: Config
type Config struct {

	//FightCommand
	FightCommand []*FightCommandDefine

	//GoodsCommand
	GoodsCommand []*GoodsCommandDefine

	//HeroCommand
	HeroCommand []*HeroCommandDefine

	//TestSheet
	TestSheet []*TestSheetDefine

	//TestCommand
	TestCommand []*TestCommandDefine

	//SealwareCommand
	SealwareCommand []*SealwareCommandDefine

	//LevelCommand
	LevelCommand []*LevelCommandDefine

	//TestCommand2
	TestCommand2 []*TestCommand2Define
}

// Defined in table: Globals
type WaveGroup struct {

	// 怪物ID
	id int32

	// 怪物數量
	count int32

	// 路線Index
	index int32

	// 测试用
	test int32

	// 間隔
	time float32

	// 延遲
	delay float32
}

// Defined in table: Globals
type Vec3 struct {
	x float32

	y float32

	z float32
}

// Defined in table: Globals
type Vec4 struct {
	x float32

	y float32

	z float32

	v float32
}

// Defined in table: Globals
type attr struct {

	// 屬性id
	attrid int32

	// 屬性值
	attrnum int32

	// 屬性比值
	attrper int32
}

// Defined in table: Globals
type composeeffect struct {
	attr string

	per int32
}

// Defined in table: Globals
type condition struct {

	// 條件主體條件主體(1:自身;2:怪物ID;3:英雄類型;4:怪物類型;5:路徑;6:龍寶寶;)
	mainpart int32

	// 條件類型條件類型(1:血量;2:數量;3:長度;4:波數;)
	conditionpattern int32

	// 判定判定(1:大於;2:大於等於;3:等於;4:小於等於;5:小於;)
	judge int32

	// 參數參數
	parameter int32
}

// Defined in table: Globals
type incident struct {

	// 主體主體(1:自身;2:怪物ID;)
	mainpart int32

	// 事件事件(1:技能ID;2:說話;)
	eventpattern int32

	// 事件參數參數
	parameter int32

	// 說話文本說話，配置文本字串
	talk string

	// 目標目標(1:無;2:怪物ID;)
	target int32

	// 目標參數參數
	targetparameter int32
}

// Defined in table: Globals
type costlist struct {

	// 資產ID
	propertyid int32

	// 數量
	num int32
}

// Defined in table: Globals
type reward struct {

	// 物品ID
	goodsid int32

	// 數量
	num int32
}

// Defined in table: Globals
type Vec2 struct {
	x float32

	y float32
}

// Defined in table: Globals
type strike struct {

	// 觸發條件條件類型(1:自身血量;2:友方數量;3:暴击触发;4：到达终点触发)
	condition int32

	// 判定判定(1:大於;2:大於等於;3:等於;4:小於等於;5:小於;)
	judge int32

	// 參數參數
	parameter int32

	// 觸發概率暴击触发/到达终点只需要填概率
	rate int32
}

// Defined in table: Globals
type trammelsskill struct {

	// 英雄數量
	heronum int32

	// 技能ID
	skillid int32
}

// Defined in table: Globals
type dropItems struct {

	// 物品ID
	itemid int32

	// 數量
	count int32

	// 權重
	weight int32

	// 触发需最小次数
	minNum int32
}

// Defined in table: Globals
type guideparameter struct {
	parameter1 int32

	parameter2 string
}

// Defined in table: Globals
type limitparameter struct {

	// 物品使用限制int型
	intlimit int32

	// 物品使用限制string型
	stringlimit string
}

// Defined in table: Globals
type herodata struct {

	// 英雄ID
	heroid int32

	// 英雄品質
	herocolor int32

	// 英雄等級
	herolevel int32

	// 英雄數量
	heronum int32
}

// Defined in table: Globals
type black struct {

	// x軸位移
	x float32

	// y軸位移
	y float32

	// z軸位移
	z float32

	// 速度
	speed float32

	// 時間（秒）
	duration float32
}

// Defined in table: Globals
type numweight struct {

	// 值与权重
	leveupnum int32

	// 值与权重
	weight int32
}

// Defined in table: Globals
type guidecondition struct {

	// 目标
	cond string

	// 目标条件
	num int32

	// 目标ID
	id int32
}

// Defined in table: Globals
type guidePicPos struct {
	x float32

	y float32
}

// Defined in table: Globals
type guidelimit struct {

	// 目标
	cond string

	// 目标条件
	num int32

	// 目标ID
	id int32
}

// Defined in table: Globals
type groups struct {

	// 掉落组ID
	groupid string

	// 掉落组调用次数
	num int32
}

// Defined in table: Globals
type talentrevise struct {

	// 修改字段名对应标签页的这个标签
	name string

	// 修改类型修改类型（1:替代；2:新增；3:数值增加；4：数值乘积）新增只应用于数组中
	pattern int32

	// 修改的魔法项数表示修改的是第几项魔法，可为空，空值表示第一项，只在修改魔法列表时生效 修改的魔法与项数对应
	magicnum int32

	// 数列项数表示要改的是第几个数列，可为空，空值表示不是数组，但是如果是数据类型是数组则不能留空
	seriesnum int32

	// 数列名数列名，可为空，空值表示直接修改数值，无数组名
	seriesname string

	// 修改值
	parameter string
}

// Defined in table: Globals
type boom struct {

	// 暴击触发的魔法id
	id int32

	// 触发暴击后最多触发次数可为空，空值表示只要暴击就能触发，不限次数。 在计数时，技能本身那次不算
	num int32
}

// Defined in table: Globals
type direction struct {

	// 参照点方向可为空，空值表示以英雄为中心，找参照点的方向，以12点为1，顺时针，共计8个方向（1-8）
	fx int32

	// 参照点距离可为空，空值表示以英雄为中心，找参照点的距离，在这个方向上距英雄几个格子距离的点，为参照点
	hero int32

	// 方向可为空，以12点为1，顺时针，共计8个方向（1-8）
	fx2 int32

	// 格子数量可为空，参照点方向上的格子数量（连续）
	linenum int32
}

// Defined in table: Globals
type cash struct {

	// 语言地区
	language string

	// 货币类型
	pattern int32

	// 价格数值
	price float32
}

// Defined in table: Globals
type HireHeroLimit struct {

	// 英雄品質雇佣任务用
	herocolor int32

	// 權重
	weight int32
}

// Defined in table: Globals
type Consumption struct {

	// 物品id商店，限时购买中，商品筛选机制使用，配置与玩家等级配置表中
	id int32

	// 消费数值
	value int32
}

// Defined in table: Globals
type typeRandom struct {

	// 属性id
	attrid int32

	// 权重
	weight int32
}

// Defined in table: Globals
type ValueRandom struct {

	// 属性数值如果对应的属性是固定值，则固定加成；如果对应的属性是比例值，则比例加成
	num int32

	// 权重
	weight int32
}

// Defined in table: FightCommand
type FightCommandDefine struct {

	//{1}命令序数
	sort int32

	//{1}命令描述文本；原则上不超过20个字
	text string

	//{1}加速倍数
	speed int32
}

// Defined in table: GoodsCommand
type GoodsCommandDefine struct {

	//{1}命令序数
	sort int32

	//{1}命令描述文本；原则上不超过20个字；
	text string

	//{1}获得物品ID、获得物品数量； 注意： 1.物品类型：资产、装备，需要各自单独配置，即不可与其他类型物品在同一个数据格中混合配置； 2.经验，获得的数量不能为负，为负时不生效； 3.装备，涉及到带有唯一ID，原则上配置获得数量不能超过99
	parameter []*reward
}

// Defined in table: HeroCommand
type HeroCommandDefine struct {

	//{1}命令序数
	sort int32

	//{1}命令描述文本；原则上不超过20个字；涉及到带有唯一ID的物品，原则配置获得数量不能超过99，如英雄
	text string

	//{1}依次为英雄ID、英雄品质、英雄等级、英雄数量； 注意： 1.英雄品质、等级只能配置比初始值高；如果其中一项未填写，则按对应ID的默认数据输入； 2.英雄涉及到带有唯一ID，原则配置获得数量不能超过99
	parameter []*herodata
}

// Defined in table: TestSheet
type TestSheetDefine struct {

	//{1}命令序数
	sort int32

	//{1}命令描述文本；原则上不超过20个字
	text string

	//{1}封印物ID
	sealwareId int32
}

// Defined in table: TestCommand
type TestCommandDefine struct {

	//{1}命令序数
	sort int32

	//{1}命令描述文本；原则上不超过20个字
	text string

	//{1}跳转的关卡ID
	levelId int32
}

// Defined in table: SealwareCommand
type SealwareCommandDefine struct {

	//{1}命令序数
	sort int32

	//{1}命令描述文本；原则上不超过20个字
	text string

	//{1}封印物ID
	sealwareId int32
}

// Defined in table: LevelCommand
type LevelCommandDefine struct {

	//{1}命令序数
	sort int32

	//{1}命令描述文本；原则上不超过20个字
	text string

	//{1}跳转的关卡ID
	levelId int32
}

// Defined in table: TestCommand2
type TestCommand2Define struct {

	//{1}命令序数
	sort int32

	//{1}命令描述文本；原则上不超过20个字
	text string

	//{1}封印物ID
	sealwareId int32
}

// Config 访问接口
type ConfigTable struct {

	// 表格原始数据
	Config

	// 索引函数表
	indexFuncByName map[string][]func(*ConfigTable) error

	// 清空函数表
	clearFuncByName map[string][]func(*ConfigTable) error

	// 加载前回调
	preFuncList []func(*ConfigTable) error

	// 加载后回调
	postFuncList []func(*ConfigTable) error

	FightCommandBysort map[int32]*FightCommandDefine

	GoodsCommandBysort map[int32]*GoodsCommandDefine

	HeroCommandBysort map[int32]*HeroCommandDefine

	TestSheetBysort map[int32]*TestSheetDefine

	TestCommandBysort map[int32]*TestCommandDefine

	SealwareCommandBysort map[int32]*SealwareCommandDefine

	LevelCommandBysort map[int32]*LevelCommandDefine

	TestCommand2Bysort map[int32]*TestCommand2Define
}

// 从json文件加载
func (self *ConfigTable) Load(filename string) error {
	data, err := ioutil.ReadFile(filename)

	if err != nil {
		return err
	}

	return self.LoadData(data)
}

// 从二进制加载
func (self *ConfigTable) LoadData(data []byte) error {

	var newTab Config

	// 读取
	err := json.Unmarshal(data, &newTab)
	if err != nil {
		return err
	}

	// 所有加载前的回调
	for _, v := range self.preFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	// 清除前通知
	for _, list := range self.clearFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 复制数据
	self.Config = newTab

	// 生成索引
	for _, list := range self.indexFuncByName {
		for _, v := range list {
			if err = v(self); err != nil {
				return err
			}
		}
	}

	// 所有完成时的回调
	for _, v := range self.postFuncList {
		if err = v(self); err != nil {
			return err
		}
	}

	return nil
}

// 注册外部索引入口, 索引回调, 清空回调
func (self *ConfigTable) RegisterIndexEntry(name string, indexCallback func(*ConfigTable) error, clearCallback func(*ConfigTable) error) {

	indexList, _ := self.indexFuncByName[name]
	clearList, _ := self.clearFuncByName[name]

	if indexCallback != nil {
		indexList = append(indexList, indexCallback)
	}

	if clearCallback != nil {
		clearList = append(clearList, clearCallback)
	}

	self.indexFuncByName[name] = indexList
	self.clearFuncByName[name] = clearList
}

// 注册加载前回调
func (self *ConfigTable) RegisterPreEntry(callback func(*ConfigTable) error) {

	self.preFuncList = append(self.preFuncList, callback)
}

// 注册所有完成时回调
func (self *ConfigTable) RegisterPostEntry(callback func(*ConfigTable) error) {

	self.postFuncList = append(self.postFuncList, callback)
}

// 创建一个Config表读取实例
func NewConfigTable() *ConfigTable {
	return &ConfigTable{

		indexFuncByName: map[string][]func(*ConfigTable) error{

			"FightCommand": {func(tab *ConfigTable) error {

				// FightCommand
				for _, def := range tab.FightCommand {

					if _, ok := tab.FightCommandBysort[def.sort]; ok {
						panic(fmt.Sprintf("duplicate index in FightCommandBysort: %v", def.sort))
					}

					tab.FightCommandBysort[def.sort] = def

				}

				return nil
			}},

			"GoodsCommand": {func(tab *ConfigTable) error {

				// GoodsCommand
				for _, def := range tab.GoodsCommand {

					if _, ok := tab.GoodsCommandBysort[def.sort]; ok {
						panic(fmt.Sprintf("duplicate index in GoodsCommandBysort: %v", def.sort))
					}

					tab.GoodsCommandBysort[def.sort] = def

				}

				return nil
			}},

			"HeroCommand": {func(tab *ConfigTable) error {

				// HeroCommand
				for _, def := range tab.HeroCommand {

					if _, ok := tab.HeroCommandBysort[def.sort]; ok {
						panic(fmt.Sprintf("duplicate index in HeroCommandBysort: %v", def.sort))
					}

					tab.HeroCommandBysort[def.sort] = def

				}

				return nil
			}},

			"TestSheet": {func(tab *ConfigTable) error {

				// TestSheet
				for _, def := range tab.TestSheet {

					if _, ok := tab.TestSheetBysort[def.sort]; ok {
						panic(fmt.Sprintf("duplicate index in TestSheetBysort: %v", def.sort))
					}

					tab.TestSheetBysort[def.sort] = def

				}

				return nil
			}},

			"TestCommand": {func(tab *ConfigTable) error {

				// TestCommand
				for _, def := range tab.TestCommand {

					if _, ok := tab.TestCommandBysort[def.sort]; ok {
						panic(fmt.Sprintf("duplicate index in TestCommandBysort: %v", def.sort))
					}

					tab.TestCommandBysort[def.sort] = def

				}

				return nil
			}},

			"SealwareCommand": {func(tab *ConfigTable) error {

				// SealwareCommand
				for _, def := range tab.SealwareCommand {

					if _, ok := tab.SealwareCommandBysort[def.sort]; ok {
						panic(fmt.Sprintf("duplicate index in SealwareCommandBysort: %v", def.sort))
					}

					tab.SealwareCommandBysort[def.sort] = def

				}

				return nil
			}},

			"LevelCommand": {func(tab *ConfigTable) error {

				// LevelCommand
				for _, def := range tab.LevelCommand {

					if _, ok := tab.LevelCommandBysort[def.sort]; ok {
						panic(fmt.Sprintf("duplicate index in LevelCommandBysort: %v", def.sort))
					}

					tab.LevelCommandBysort[def.sort] = def

				}

				return nil
			}},

			"TestCommand2": {func(tab *ConfigTable) error {

				// TestCommand2
				for _, def := range tab.TestCommand2 {

					if _, ok := tab.TestCommand2Bysort[def.sort]; ok {
						panic(fmt.Sprintf("duplicate index in TestCommand2Bysort: %v", def.sort))
					}

					tab.TestCommand2Bysort[def.sort] = def

				}

				return nil
			}},
		},

		clearFuncByName: map[string][]func(*ConfigTable) error{

			"FightCommand": {func(tab *ConfigTable) error {

				// FightCommand

				tab.FightCommandBysort = make(map[int32]*FightCommandDefine)

				return nil
			}},

			"GoodsCommand": {func(tab *ConfigTable) error {

				// GoodsCommand

				tab.GoodsCommandBysort = make(map[int32]*GoodsCommandDefine)

				return nil
			}},

			"HeroCommand": {func(tab *ConfigTable) error {

				// HeroCommand

				tab.HeroCommandBysort = make(map[int32]*HeroCommandDefine)

				return nil
			}},

			"TestSheet": {func(tab *ConfigTable) error {

				// TestSheet

				tab.TestSheetBysort = make(map[int32]*TestSheetDefine)

				return nil
			}},

			"TestCommand": {func(tab *ConfigTable) error {

				// TestCommand

				tab.TestCommandBysort = make(map[int32]*TestCommandDefine)

				return nil
			}},

			"SealwareCommand": {func(tab *ConfigTable) error {

				// SealwareCommand

				tab.SealwareCommandBysort = make(map[int32]*SealwareCommandDefine)

				return nil
			}},

			"LevelCommand": {func(tab *ConfigTable) error {

				// LevelCommand

				tab.LevelCommandBysort = make(map[int32]*LevelCommandDefine)

				return nil
			}},

			"TestCommand2": {func(tab *ConfigTable) error {

				// TestCommand2

				tab.TestCommand2Bysort = make(map[int32]*TestCommand2Define)

				return nil
			}},
		},

		FightCommandBysort: make(map[int32]*FightCommandDefine),

		GoodsCommandBysort: make(map[int32]*GoodsCommandDefine),

		HeroCommandBysort: make(map[int32]*HeroCommandDefine),

		TestSheetBysort: make(map[int32]*TestSheetDefine),

		TestCommandBysort: make(map[int32]*TestCommandDefine),

		SealwareCommandBysort: make(map[int32]*SealwareCommandDefine),

		LevelCommandBysort: make(map[int32]*LevelCommandDefine),

		TestCommand2Bysort: make(map[int32]*TestCommand2Define),
	}
}
