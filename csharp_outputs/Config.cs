// Generated by github.com/davyxu/tabtoy
// Version: 
// DO NOT EDIT!!
using System.Collections.Generic;

namespace table
{
	
	

	// Defined in table: Config
	
	public partial class Config
	{
	
		public tabtoy.Logger TableLogger = new tabtoy.Logger();
	
		
		/// <summary> 
		/// FightCommand
		/// </summary>
		public List<FightCommandDefine> FightCommand = new List<FightCommandDefine>(); 
		
		/// <summary> 
		/// GoodsCommand
		/// </summary>
		public List<GoodsCommandDefine> GoodsCommand = new List<GoodsCommandDefine>(); 
		
		/// <summary> 
		/// HeroCommand
		/// </summary>
		public List<HeroCommandDefine> HeroCommand = new List<HeroCommandDefine>(); 
		
		/// <summary> 
		/// TestSheet
		/// </summary>
		public List<TestSheetDefine> TestSheet = new List<TestSheetDefine>(); 
		
		/// <summary> 
		/// TestCommand
		/// </summary>
		public List<TestCommandDefine> TestCommand = new List<TestCommandDefine>(); 
		
		/// <summary> 
		/// LevelCommand
		/// </summary>
		public List<LevelCommandDefine> LevelCommand = new List<LevelCommandDefine>(); 
	
	
		#region Index code
	 	Dictionary<int, FightCommandDefine> _FightCommandBysort = new Dictionary<int, FightCommandDefine>();
        public FightCommandDefine GetFightCommandBysort(int sort, FightCommandDefine def = default(FightCommandDefine))
        {
            FightCommandDefine ret;
            if ( _FightCommandBysort.TryGetValue( sort, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(FightCommandDefine) )
			{
				TableLogger.ErrorLine("GetFightCommandBysort failed, sort: {0}", sort);
			}

            return def;
        }
		Dictionary<int, GoodsCommandDefine> _GoodsCommandBysort = new Dictionary<int, GoodsCommandDefine>();
        public GoodsCommandDefine GetGoodsCommandBysort(int sort, GoodsCommandDefine def = default(GoodsCommandDefine))
        {
            GoodsCommandDefine ret;
            if ( _GoodsCommandBysort.TryGetValue( sort, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(GoodsCommandDefine) )
			{
				TableLogger.ErrorLine("GetGoodsCommandBysort failed, sort: {0}", sort);
			}

            return def;
        }
		Dictionary<int, HeroCommandDefine> _HeroCommandBysort = new Dictionary<int, HeroCommandDefine>();
        public HeroCommandDefine GetHeroCommandBysort(int sort, HeroCommandDefine def = default(HeroCommandDefine))
        {
            HeroCommandDefine ret;
            if ( _HeroCommandBysort.TryGetValue( sort, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(HeroCommandDefine) )
			{
				TableLogger.ErrorLine("GetHeroCommandBysort failed, sort: {0}", sort);
			}

            return def;
        }
		Dictionary<int, TestSheetDefine> _TestSheetBysort = new Dictionary<int, TestSheetDefine>();
        public TestSheetDefine GetTestSheetBysort(int sort, TestSheetDefine def = default(TestSheetDefine))
        {
            TestSheetDefine ret;
            if ( _TestSheetBysort.TryGetValue( sort, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(TestSheetDefine) )
			{
				TableLogger.ErrorLine("GetTestSheetBysort failed, sort: {0}", sort);
			}

            return def;
        }
		Dictionary<int, TestCommandDefine> _TestCommandBysort = new Dictionary<int, TestCommandDefine>();
        public TestCommandDefine GetTestCommandBysort(int sort, TestCommandDefine def = default(TestCommandDefine))
        {
            TestCommandDefine ret;
            if ( _TestCommandBysort.TryGetValue( sort, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(TestCommandDefine) )
			{
				TableLogger.ErrorLine("GetTestCommandBysort failed, sort: {0}", sort);
			}

            return def;
        }
		Dictionary<int, LevelCommandDefine> _LevelCommandBysort = new Dictionary<int, LevelCommandDefine>();
        public LevelCommandDefine GetLevelCommandBysort(int sort, LevelCommandDefine def = default(LevelCommandDefine))
        {
            LevelCommandDefine ret;
            if ( _LevelCommandBysort.TryGetValue( sort, out ret ) )
            {
                return ret;
            }
			
			if ( def == default(LevelCommandDefine) )
			{
				TableLogger.ErrorLine("GetLevelCommandBysort failed, sort: {0}", sort);
			}

            return def;
        }
		
		public string GetBuildID(){
			return "1a1850598ccc9594658c49033a936ee8";
		}
	
		#endregion
		#region Deserialize code
		
		static tabtoy.DeserializeHandler<Config> _ConfigDeserializeHandler;
		static tabtoy.DeserializeHandler<Config> ConfigDeserializeHandler
		{
			get
			{
				if (_ConfigDeserializeHandler == null )
				{
					_ConfigDeserializeHandler = new tabtoy.DeserializeHandler<Config>(Deserialize);
				}

				return _ConfigDeserializeHandler;
			}
		}
		public static void Deserialize( Config ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0xa0001:
                	{
						ins.FightCommand.Add( reader.ReadStruct<FightCommandDefine>(FightCommandDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0002:
                	{
						ins.GoodsCommand.Add( reader.ReadStruct<GoodsCommandDefine>(GoodsCommandDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0003:
                	{
						ins.HeroCommand.Add( reader.ReadStruct<HeroCommandDefine>(HeroCommandDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0025:
                	{
						ins.TestSheet.Add( reader.ReadStruct<TestSheetDefine>(TestSheetDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0024:
                	{
						ins.TestCommand.Add( reader.ReadStruct<TestCommandDefine>(TestCommandDefineDeserializeHandler) );
                	}
                	break; 
                	case 0xa0005:
                	{
						ins.LevelCommand.Add( reader.ReadStruct<LevelCommandDefine>(LevelCommandDefineDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
			// Build FightCommand Index
			for( int i = 0;i< ins.FightCommand.Count;i++)
			{
				var element = ins.FightCommand[i];
				
				ins._FightCommandBysort.Add(element.sort, element);
				
			}
			
			// Build GoodsCommand Index
			for( int i = 0;i< ins.GoodsCommand.Count;i++)
			{
				var element = ins.GoodsCommand[i];
				
				ins._GoodsCommandBysort.Add(element.sort, element);
				
			}
			
			// Build HeroCommand Index
			for( int i = 0;i< ins.HeroCommand.Count;i++)
			{
				var element = ins.HeroCommand[i];
				
				ins._HeroCommandBysort.Add(element.sort, element);
				
			}
			
			// Build TestSheet Index
			for( int i = 0;i< ins.TestSheet.Count;i++)
			{
				var element = ins.TestSheet[i];
				
				ins._TestSheetBysort.Add(element.sort, element);
				
			}
			
			// Build TestCommand Index
			for( int i = 0;i< ins.TestCommand.Count;i++)
			{
				var element = ins.TestCommand[i];
				
				ins._TestCommandBysort.Add(element.sort, element);
				
			}
			
			// Build LevelCommand Index
			for( int i = 0;i< ins.LevelCommand.Count;i++)
			{
				var element = ins.LevelCommand[i];
				
				ins._LevelCommandBysort.Add(element.sort, element);
				
			}
			
		}
		static tabtoy.DeserializeHandler<WaveGroup> _WaveGroupDeserializeHandler;
		static tabtoy.DeserializeHandler<WaveGroup> WaveGroupDeserializeHandler
		{
			get
			{
				if (_WaveGroupDeserializeHandler == null )
				{
					_WaveGroupDeserializeHandler = new tabtoy.DeserializeHandler<WaveGroup>(Deserialize);
				}

				return _WaveGroupDeserializeHandler;
			}
		}
		public static void Deserialize( WaveGroup ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.id = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.count = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.index = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.test = reader.ReadInt32();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.time = reader.ReadFloat();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.delay = reader.ReadFloat();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<Vec3> _Vec3DeserializeHandler;
		static tabtoy.DeserializeHandler<Vec3> Vec3DeserializeHandler
		{
			get
			{
				if (_Vec3DeserializeHandler == null )
				{
					_Vec3DeserializeHandler = new tabtoy.DeserializeHandler<Vec3>(Deserialize);
				}

				return _Vec3DeserializeHandler;
			}
		}
		public static void Deserialize( Vec3 ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50001:
                	{
						ins.x = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.y = reader.ReadFloat();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.z = reader.ReadFloat();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<Vec4> _Vec4DeserializeHandler;
		static tabtoy.DeserializeHandler<Vec4> Vec4DeserializeHandler
		{
			get
			{
				if (_Vec4DeserializeHandler == null )
				{
					_Vec4DeserializeHandler = new tabtoy.DeserializeHandler<Vec4>(Deserialize);
				}

				return _Vec4DeserializeHandler;
			}
		}
		public static void Deserialize( Vec4 ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50001:
                	{
						ins.x = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.y = reader.ReadFloat();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.z = reader.ReadFloat();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.v = reader.ReadFloat();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<attr> _attrDeserializeHandler;
		static tabtoy.DeserializeHandler<attr> attrDeserializeHandler
		{
			get
			{
				if (_attrDeserializeHandler == null )
				{
					_attrDeserializeHandler = new tabtoy.DeserializeHandler<attr>(Deserialize);
				}

				return _attrDeserializeHandler;
			}
		}
		public static void Deserialize( attr ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.attrid = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.attrnum = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.attrper = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<composeeffect> _composeeffectDeserializeHandler;
		static tabtoy.DeserializeHandler<composeeffect> composeeffectDeserializeHandler
		{
			get
			{
				if (_composeeffectDeserializeHandler == null )
				{
					_composeeffectDeserializeHandler = new tabtoy.DeserializeHandler<composeeffect>(Deserialize);
				}

				return _composeeffectDeserializeHandler;
			}
		}
		public static void Deserialize( composeeffect ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60001:
                	{
						ins.attr = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.per = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<condition> _conditionDeserializeHandler;
		static tabtoy.DeserializeHandler<condition> conditionDeserializeHandler
		{
			get
			{
				if (_conditionDeserializeHandler == null )
				{
					_conditionDeserializeHandler = new tabtoy.DeserializeHandler<condition>(Deserialize);
				}

				return _conditionDeserializeHandler;
			}
		}
		public static void Deserialize( condition ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.mainpart = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.conditionpattern = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.judge = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.parameter = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<incident> _incidentDeserializeHandler;
		static tabtoy.DeserializeHandler<incident> incidentDeserializeHandler
		{
			get
			{
				if (_incidentDeserializeHandler == null )
				{
					_incidentDeserializeHandler = new tabtoy.DeserializeHandler<incident>(Deserialize);
				}

				return _incidentDeserializeHandler;
			}
		}
		public static void Deserialize( incident ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.mainpart = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.eventpattern = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.parameter = reader.ReadInt32();
                	}
                	break; 
                	case 0x60004:
                	{
						ins.talk = reader.ReadString();
                	}
                	break; 
                	case 0x10005:
                	{
						ins.target = reader.ReadInt32();
                	}
                	break; 
                	case 0x10006:
                	{
						ins.targetparameter = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<costlist> _costlistDeserializeHandler;
		static tabtoy.DeserializeHandler<costlist> costlistDeserializeHandler
		{
			get
			{
				if (_costlistDeserializeHandler == null )
				{
					_costlistDeserializeHandler = new tabtoy.DeserializeHandler<costlist>(Deserialize);
				}

				return _costlistDeserializeHandler;
			}
		}
		public static void Deserialize( costlist ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.propertyid = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.num = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<reward> _rewardDeserializeHandler;
		static tabtoy.DeserializeHandler<reward> rewardDeserializeHandler
		{
			get
			{
				if (_rewardDeserializeHandler == null )
				{
					_rewardDeserializeHandler = new tabtoy.DeserializeHandler<reward>(Deserialize);
				}

				return _rewardDeserializeHandler;
			}
		}
		public static void Deserialize( reward ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.goodsid = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.num = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<Vec2> _Vec2DeserializeHandler;
		static tabtoy.DeserializeHandler<Vec2> Vec2DeserializeHandler
		{
			get
			{
				if (_Vec2DeserializeHandler == null )
				{
					_Vec2DeserializeHandler = new tabtoy.DeserializeHandler<Vec2>(Deserialize);
				}

				return _Vec2DeserializeHandler;
			}
		}
		public static void Deserialize( Vec2 ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50001:
                	{
						ins.x = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.y = reader.ReadFloat();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<strike> _strikeDeserializeHandler;
		static tabtoy.DeserializeHandler<strike> strikeDeserializeHandler
		{
			get
			{
				if (_strikeDeserializeHandler == null )
				{
					_strikeDeserializeHandler = new tabtoy.DeserializeHandler<strike>(Deserialize);
				}

				return _strikeDeserializeHandler;
			}
		}
		public static void Deserialize( strike ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.condition = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.judge = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.parameter = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.rate = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<trammelsskill> _trammelsskillDeserializeHandler;
		static tabtoy.DeserializeHandler<trammelsskill> trammelsskillDeserializeHandler
		{
			get
			{
				if (_trammelsskillDeserializeHandler == null )
				{
					_trammelsskillDeserializeHandler = new tabtoy.DeserializeHandler<trammelsskill>(Deserialize);
				}

				return _trammelsskillDeserializeHandler;
			}
		}
		public static void Deserialize( trammelsskill ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.heronum = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.skillid = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<dropItems> _dropItemsDeserializeHandler;
		static tabtoy.DeserializeHandler<dropItems> dropItemsDeserializeHandler
		{
			get
			{
				if (_dropItemsDeserializeHandler == null )
				{
					_dropItemsDeserializeHandler = new tabtoy.DeserializeHandler<dropItems>(Deserialize);
				}

				return _dropItemsDeserializeHandler;
			}
		}
		public static void Deserialize( dropItems ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.itemid = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.count = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.weight = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.minNum = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<guideparameter> _guideparameterDeserializeHandler;
		static tabtoy.DeserializeHandler<guideparameter> guideparameterDeserializeHandler
		{
			get
			{
				if (_guideparameterDeserializeHandler == null )
				{
					_guideparameterDeserializeHandler = new tabtoy.DeserializeHandler<guideparameter>(Deserialize);
				}

				return _guideparameterDeserializeHandler;
			}
		}
		public static void Deserialize( guideparameter ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.parameter1 = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.parameter2 = reader.ReadString();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<limitparameter> _limitparameterDeserializeHandler;
		static tabtoy.DeserializeHandler<limitparameter> limitparameterDeserializeHandler
		{
			get
			{
				if (_limitparameterDeserializeHandler == null )
				{
					_limitparameterDeserializeHandler = new tabtoy.DeserializeHandler<limitparameter>(Deserialize);
				}

				return _limitparameterDeserializeHandler;
			}
		}
		public static void Deserialize( limitparameter ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.intlimit = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.stringlimit = reader.ReadString();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<herodata> _herodataDeserializeHandler;
		static tabtoy.DeserializeHandler<herodata> herodataDeserializeHandler
		{
			get
			{
				if (_herodataDeserializeHandler == null )
				{
					_herodataDeserializeHandler = new tabtoy.DeserializeHandler<herodata>(Deserialize);
				}

				return _herodataDeserializeHandler;
			}
		}
		public static void Deserialize( herodata ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.heroid = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.herocolor = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.herolevel = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.heronum = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<black> _blackDeserializeHandler;
		static tabtoy.DeserializeHandler<black> blackDeserializeHandler
		{
			get
			{
				if (_blackDeserializeHandler == null )
				{
					_blackDeserializeHandler = new tabtoy.DeserializeHandler<black>(Deserialize);
				}

				return _blackDeserializeHandler;
			}
		}
		public static void Deserialize( black ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50001:
                	{
						ins.x = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.y = reader.ReadFloat();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.z = reader.ReadFloat();
                	}
                	break; 
                	case 0x50004:
                	{
						ins.speed = reader.ReadFloat();
                	}
                	break; 
                	case 0x50005:
                	{
						ins.duration = reader.ReadFloat();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<numweight> _numweightDeserializeHandler;
		static tabtoy.DeserializeHandler<numweight> numweightDeserializeHandler
		{
			get
			{
				if (_numweightDeserializeHandler == null )
				{
					_numweightDeserializeHandler = new tabtoy.DeserializeHandler<numweight>(Deserialize);
				}

				return _numweightDeserializeHandler;
			}
		}
		public static void Deserialize( numweight ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.leveupnum = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.weight = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<guidecondition> _guideconditionDeserializeHandler;
		static tabtoy.DeserializeHandler<guidecondition> guideconditionDeserializeHandler
		{
			get
			{
				if (_guideconditionDeserializeHandler == null )
				{
					_guideconditionDeserializeHandler = new tabtoy.DeserializeHandler<guidecondition>(Deserialize);
				}

				return _guideconditionDeserializeHandler;
			}
		}
		public static void Deserialize( guidecondition ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60001:
                	{
						ins.cond = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.num = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.id = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<guidePicPos> _guidePicPosDeserializeHandler;
		static tabtoy.DeserializeHandler<guidePicPos> guidePicPosDeserializeHandler
		{
			get
			{
				if (_guidePicPosDeserializeHandler == null )
				{
					_guidePicPosDeserializeHandler = new tabtoy.DeserializeHandler<guidePicPos>(Deserialize);
				}

				return _guidePicPosDeserializeHandler;
			}
		}
		public static void Deserialize( guidePicPos ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x50001:
                	{
						ins.x = reader.ReadFloat();
                	}
                	break; 
                	case 0x50002:
                	{
						ins.y = reader.ReadFloat();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<guidelimit> _guidelimitDeserializeHandler;
		static tabtoy.DeserializeHandler<guidelimit> guidelimitDeserializeHandler
		{
			get
			{
				if (_guidelimitDeserializeHandler == null )
				{
					_guidelimitDeserializeHandler = new tabtoy.DeserializeHandler<guidelimit>(Deserialize);
				}

				return _guidelimitDeserializeHandler;
			}
		}
		public static void Deserialize( guidelimit ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60001:
                	{
						ins.cond = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.num = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.id = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<groups> _groupsDeserializeHandler;
		static tabtoy.DeserializeHandler<groups> groupsDeserializeHandler
		{
			get
			{
				if (_groupsDeserializeHandler == null )
				{
					_groupsDeserializeHandler = new tabtoy.DeserializeHandler<groups>(Deserialize);
				}

				return _groupsDeserializeHandler;
			}
		}
		public static void Deserialize( groups ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60001:
                	{
						ins.groupid = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.num = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<talentrevise> _talentreviseDeserializeHandler;
		static tabtoy.DeserializeHandler<talentrevise> talentreviseDeserializeHandler
		{
			get
			{
				if (_talentreviseDeserializeHandler == null )
				{
					_talentreviseDeserializeHandler = new tabtoy.DeserializeHandler<talentrevise>(Deserialize);
				}

				return _talentreviseDeserializeHandler;
			}
		}
		public static void Deserialize( talentrevise ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60001:
                	{
						ins.name = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.pattern = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.magicnum = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.seriesnum = reader.ReadInt32();
                	}
                	break; 
                	case 0x60005:
                	{
						ins.seriesname = reader.ReadString();
                	}
                	break; 
                	case 0x60006:
                	{
						ins.parameter = reader.ReadString();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<boom> _boomDeserializeHandler;
		static tabtoy.DeserializeHandler<boom> boomDeserializeHandler
		{
			get
			{
				if (_boomDeserializeHandler == null )
				{
					_boomDeserializeHandler = new tabtoy.DeserializeHandler<boom>(Deserialize);
				}

				return _boomDeserializeHandler;
			}
		}
		public static void Deserialize( boom ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.id = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.num = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<direction> _directionDeserializeHandler;
		static tabtoy.DeserializeHandler<direction> directionDeserializeHandler
		{
			get
			{
				if (_directionDeserializeHandler == null )
				{
					_directionDeserializeHandler = new tabtoy.DeserializeHandler<direction>(Deserialize);
				}

				return _directionDeserializeHandler;
			}
		}
		public static void Deserialize( direction ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.fx = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.hero = reader.ReadInt32();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.fx2 = reader.ReadInt32();
                	}
                	break; 
                	case 0x10004:
                	{
						ins.linenum = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<cash> _cashDeserializeHandler;
		static tabtoy.DeserializeHandler<cash> cashDeserializeHandler
		{
			get
			{
				if (_cashDeserializeHandler == null )
				{
					_cashDeserializeHandler = new tabtoy.DeserializeHandler<cash>(Deserialize);
				}

				return _cashDeserializeHandler;
			}
		}
		public static void Deserialize( cash ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x60001:
                	{
						ins.language = reader.ReadString();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.pattern = reader.ReadInt32();
                	}
                	break; 
                	case 0x50003:
                	{
						ins.price = reader.ReadFloat();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<HireHeroLimit> _HireHeroLimitDeserializeHandler;
		static tabtoy.DeserializeHandler<HireHeroLimit> HireHeroLimitDeserializeHandler
		{
			get
			{
				if (_HireHeroLimitDeserializeHandler == null )
				{
					_HireHeroLimitDeserializeHandler = new tabtoy.DeserializeHandler<HireHeroLimit>(Deserialize);
				}

				return _HireHeroLimitDeserializeHandler;
			}
		}
		public static void Deserialize( HireHeroLimit ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.herocolor = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.weight = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<Consumption> _ConsumptionDeserializeHandler;
		static tabtoy.DeserializeHandler<Consumption> ConsumptionDeserializeHandler
		{
			get
			{
				if (_ConsumptionDeserializeHandler == null )
				{
					_ConsumptionDeserializeHandler = new tabtoy.DeserializeHandler<Consumption>(Deserialize);
				}

				return _ConsumptionDeserializeHandler;
			}
		}
		public static void Deserialize( Consumption ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.id = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.value = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<typeRandom> _typeRandomDeserializeHandler;
		static tabtoy.DeserializeHandler<typeRandom> typeRandomDeserializeHandler
		{
			get
			{
				if (_typeRandomDeserializeHandler == null )
				{
					_typeRandomDeserializeHandler = new tabtoy.DeserializeHandler<typeRandom>(Deserialize);
				}

				return _typeRandomDeserializeHandler;
			}
		}
		public static void Deserialize( typeRandom ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.attrid = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.weight = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<ValueRandom> _ValueRandomDeserializeHandler;
		static tabtoy.DeserializeHandler<ValueRandom> ValueRandomDeserializeHandler
		{
			get
			{
				if (_ValueRandomDeserializeHandler == null )
				{
					_ValueRandomDeserializeHandler = new tabtoy.DeserializeHandler<ValueRandom>(Deserialize);
				}

				return _ValueRandomDeserializeHandler;
			}
		}
		public static void Deserialize( ValueRandom ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.num = reader.ReadInt32();
                	}
                	break; 
                	case 0x10002:
                	{
						ins.weight = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<FightCommandDefine> _FightCommandDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<FightCommandDefine> FightCommandDefineDeserializeHandler
		{
			get
			{
				if (_FightCommandDefineDeserializeHandler == null )
				{
					_FightCommandDefineDeserializeHandler = new tabtoy.DeserializeHandler<FightCommandDefine>(Deserialize);
				}

				return _FightCommandDefineDeserializeHandler;
			}
		}
		public static void Deserialize( FightCommandDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.sort = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.text = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.speed = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<GoodsCommandDefine> _GoodsCommandDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<GoodsCommandDefine> GoodsCommandDefineDeserializeHandler
		{
			get
			{
				if (_GoodsCommandDefineDeserializeHandler == null )
				{
					_GoodsCommandDefineDeserializeHandler = new tabtoy.DeserializeHandler<GoodsCommandDefine>(Deserialize);
				}

				return _GoodsCommandDefineDeserializeHandler;
			}
		}
		public static void Deserialize( GoodsCommandDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.sort = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.text = reader.ReadString();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.parameter.Add( reader.ReadStruct<reward>(rewardDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<HeroCommandDefine> _HeroCommandDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<HeroCommandDefine> HeroCommandDefineDeserializeHandler
		{
			get
			{
				if (_HeroCommandDefineDeserializeHandler == null )
				{
					_HeroCommandDefineDeserializeHandler = new tabtoy.DeserializeHandler<HeroCommandDefine>(Deserialize);
				}

				return _HeroCommandDefineDeserializeHandler;
			}
		}
		public static void Deserialize( HeroCommandDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.sort = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.text = reader.ReadString();
                	}
                	break; 
                	case 0x90003:
                	{
						ins.parameter.Add( reader.ReadStruct<herodata>(herodataDeserializeHandler) );
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<TestSheetDefine> _TestSheetDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<TestSheetDefine> TestSheetDefineDeserializeHandler
		{
			get
			{
				if (_TestSheetDefineDeserializeHandler == null )
				{
					_TestSheetDefineDeserializeHandler = new tabtoy.DeserializeHandler<TestSheetDefine>(Deserialize);
				}

				return _TestSheetDefineDeserializeHandler;
			}
		}
		public static void Deserialize( TestSheetDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.sort = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.text = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.sealwareId = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<TestCommandDefine> _TestCommandDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<TestCommandDefine> TestCommandDefineDeserializeHandler
		{
			get
			{
				if (_TestCommandDefineDeserializeHandler == null )
				{
					_TestCommandDefineDeserializeHandler = new tabtoy.DeserializeHandler<TestCommandDefine>(Deserialize);
				}

				return _TestCommandDefineDeserializeHandler;
			}
		}
		public static void Deserialize( TestCommandDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.sort = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.text = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.levelId = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		static tabtoy.DeserializeHandler<LevelCommandDefine> _LevelCommandDefineDeserializeHandler;
		static tabtoy.DeserializeHandler<LevelCommandDefine> LevelCommandDefineDeserializeHandler
		{
			get
			{
				if (_LevelCommandDefineDeserializeHandler == null )
				{
					_LevelCommandDefineDeserializeHandler = new tabtoy.DeserializeHandler<LevelCommandDefine>(Deserialize);
				}

				return _LevelCommandDefineDeserializeHandler;
			}
		}
		public static void Deserialize( LevelCommandDefine ins, tabtoy.DataReader reader )
		{
			
 			int tag = -1;
            while ( -1 != (tag = reader.ReadTag()))
            {
                switch (tag)
                { 
                	case 0x10001:
                	{
						ins.sort = reader.ReadInt32();
                	}
                	break; 
                	case 0x60002:
                	{
						ins.text = reader.ReadString();
                	}
                	break; 
                	case 0x10003:
                	{
						ins.levelId = reader.ReadInt32();
                	}
                	break; 
                }
             } 

			
		}
		#endregion
		#region Clear Code
		public void Clear( )
		{			
				FightCommand.Clear(); 		
				GoodsCommand.Clear(); 		
				HeroCommand.Clear(); 		
				TestSheet.Clear(); 		
				TestCommand.Clear(); 		
				LevelCommand.Clear(); 
			
				_FightCommandBysort.Clear(); 
				_GoodsCommandBysort.Clear(); 
				_HeroCommandBysort.Clear(); 
				_TestSheetBysort.Clear(); 
				_TestCommandBysort.Clear(); 
				_LevelCommandBysort.Clear(); 
		}
		#endregion
	

	} 

	// Defined in table: Globals
	
	public partial class WaveGroup
	{
	
		
		
		public int id = 0; // 怪物ID
		
		
		public int count = 0; // 怪物數量
		
		
		public int index = 0; // 路線Index
		
		
		public int test = 0; // 测试用
		
		
		public float time = 0f; // 間隔
		
		
		public float delay = 0f; // 延遲
	
	

	} 

	// Defined in table: Globals
	
	public partial class Vec3
	{
	
		
		
		public float x = 0f; 
		
		
		public float y = 0f; 
		
		
		public float z = 0f; 
	
	

	} 

	// Defined in table: Globals
	
	public partial class Vec4
	{
	
		
		
		public float x = 0f; 
		
		
		public float y = 0f; 
		
		
		public float z = 0f; 
		
		
		public float v = 0f; 
	
	

	} 

	// Defined in table: Globals
	
	public partial class attr
	{
	
		
		
		public int attrid = 0; // 屬性id
		
		
		public int attrnum = 0; // 屬性值
		
		
		public int attrper = 0; // 屬性比值
	
	

	} 

	// Defined in table: Globals
	
	public partial class composeeffect
	{
	
		
		
		public string attr = ""; 
		
		
		public int per = 0; 
	
	

	} 

	// Defined in table: Globals
	
	public partial class condition
	{
	
		
		/// <summary> 
		/// 條件主體(1:自身;2:怪物ID;3:英雄類型;4:怪物類型;5:路徑;6:龍寶寶;)
		/// </summary>
		public int mainpart = 0; // 條件主體
		
		/// <summary> 
		/// 條件類型(1:血量;2:數量;3:長度;4:波數;)
		/// </summary>
		public int conditionpattern = 0; // 條件類型
		
		/// <summary> 
		/// 判定(1:大於;2:大於等於;3:等於;4:小於等於;5:小於;)
		/// </summary>
		public int judge = 0; // 判定
		
		/// <summary> 
		/// 參數
		/// </summary>
		public int parameter = 0; // 參數
	
	

	} 

	// Defined in table: Globals
	
	public partial class incident
	{
	
		
		/// <summary> 
		/// 主體(1:自身;2:怪物ID;)
		/// </summary>
		public int mainpart = 0; // 主體
		
		/// <summary> 
		/// 事件(1:技能ID;2:說話;)
		/// </summary>
		public int eventpattern = 0; // 事件
		
		/// <summary> 
		/// 參數
		/// </summary>
		public int parameter = 0; // 事件參數
		
		/// <summary> 
		/// 說話，配置文本字串
		/// </summary>
		public string talk = ""; // 說話文本
		
		/// <summary> 
		/// 目標(1:無;2:怪物ID;)
		/// </summary>
		public int target = 0; // 目標
		
		/// <summary> 
		/// 參數
		/// </summary>
		public int targetparameter = 0; // 目標參數
	
	

	} 

	// Defined in table: Globals
	
	public partial class costlist
	{
	
		
		
		public int propertyid = 0; // 資產ID
		
		
		public int num = 0; // 數量
	
	

	} 

	// Defined in table: Globals
	
	public partial class reward
	{
	
		
		
		public int goodsid = 0; // 物品ID
		
		
		public int num = 0; // 數量
	
	

	} 

	// Defined in table: Globals
	
	public partial class Vec2
	{
	
		
		
		public float x = 0f; 
		
		
		public float y = 0f; 
	
	

	} 

	// Defined in table: Globals
	
	public partial class strike
	{
	
		
		/// <summary> 
		/// 條件類型(1:自身血量;2:友方數量;3:暴击触发;4：到达终点触发)
		/// </summary>
		public int condition = 0; // 觸發條件
		
		/// <summary> 
		/// 判定(1:大於;2:大於等於;3:等於;4:小於等於;5:小於;)
		/// </summary>
		public int judge = 0; // 判定
		
		/// <summary> 
		/// 參數
		/// </summary>
		public int parameter = 0; // 參數
		
		/// <summary> 
		/// 暴击触发/到达终点只需要填概率
		/// </summary>
		public int rate = 0; // 觸發概率
	
	

	} 

	// Defined in table: Globals
	
	public partial class trammelsskill
	{
	
		
		
		public int heronum = 0; // 英雄數量
		
		
		public int skillid = 0; // 技能ID
	
	

	} 

	// Defined in table: Globals
	
	public partial class dropItems
	{
	
		
		
		public int itemid = 0; // 物品ID
		
		
		public int count = 0; // 數量
		
		
		public int weight = 0; // 權重
		
		
		public int minNum = 0; // 触发需最小次数
	
	

	} 

	// Defined in table: Globals
	
	public partial class guideparameter
	{
	
		
		
		public int parameter1 = 0; 
		
		
		public string parameter2 = ""; 
	
	

	} 

	// Defined in table: Globals
	
	public partial class limitparameter
	{
	
		
		
		public int intlimit = 0; // 物品使用限制int型
		
		
		public string stringlimit = ""; // 物品使用限制string型
	
	

	} 

	// Defined in table: Globals
	
	public partial class herodata
	{
	
		
		
		public int heroid = 0; // 英雄ID
		
		
		public int herocolor = 0; // 英雄品質
		
		
		public int herolevel = 0; // 英雄等級
		
		
		public int heronum = 0; // 英雄數量
	
	

	} 

	// Defined in table: Globals
	
	public partial class black
	{
	
		
		
		public float x = 0f; // x軸位移
		
		
		public float y = 0f; // y軸位移
		
		
		public float z = 0f; // z軸位移
		
		
		public float speed = 0f; // 速度
		
		
		public float duration = 0f; // 時間（秒）
	
	

	} 

	// Defined in table: Globals
	
	public partial class numweight
	{
	
		
		
		public int leveupnum = 0; // 值与权重
		
		
		public int weight = 0; // 值与权重
	
	

	} 

	// Defined in table: Globals
	
	public partial class guidecondition
	{
	
		
		
		public string cond = ""; // 目标
		
		
		public int num = 0; // 目标条件
		
		
		public int id = 0; // 目标ID
	
	

	} 

	// Defined in table: Globals
	
	public partial class guidePicPos
	{
	
		
		
		public float x = 0f; 
		
		
		public float y = 0f; 
	
	

	} 

	// Defined in table: Globals
	
	public partial class guidelimit
	{
	
		
		
		public string cond = ""; // 目标
		
		
		public int num = 0; // 目标条件
		
		
		public int id = 0; // 目标ID
	
	

	} 

	// Defined in table: Globals
	
	public partial class groups
	{
	
		
		
		public string groupid = ""; // 掉落组ID
		
		
		public int num = 0; // 掉落组调用次数
	
	

	} 

	// Defined in table: Globals
	
	public partial class talentrevise
	{
	
		
		/// <summary> 
		/// 对应标签页的这个标签
		/// </summary>
		public string name = ""; // 修改字段名
		
		/// <summary> 
		/// 修改类型（1:替代；2:新增；3:数值增加；4：数值乘积）新增只应用于数组中
		/// </summary>
		public int pattern = 0; // 修改类型
		
		/// <summary> 
		/// 表示修改的是第几项魔法，可为空，空值表示第一项，只在修改魔法列表时生效 修改的魔法与项数对应
		/// </summary>
		public int magicnum = 0; // 修改的魔法项数
		
		/// <summary> 
		/// 表示要改的是第几个数列，可为空，空值表示不是数组，但是如果是数据类型是数组则不能留空
		/// </summary>
		public int seriesnum = 0; // 数列项数
		
		/// <summary> 
		/// 数列名，可为空，空值表示直接修改数值，无数组名
		/// </summary>
		public string seriesname = ""; // 数列名
		
		
		public string parameter = ""; // 修改值
	
	

	} 

	// Defined in table: Globals
	
	public partial class boom
	{
	
		
		
		public int id = 0; // 暴击触发的魔法id
		
		/// <summary> 
		/// 可为空，空值表示只要暴击就能触发，不限次数。 在计数时，技能本身那次不算
		/// </summary>
		public int num = 0; // 触发暴击后最多触发次数
	
	

	} 

	// Defined in table: Globals
	
	public partial class direction
	{
	
		
		/// <summary> 
		/// 可为空，空值表示以英雄为中心，找参照点的方向，以12点为1，顺时针，共计8个方向（1-8）
		/// </summary>
		public int fx = 0; // 参照点方向
		
		/// <summary> 
		/// 可为空，空值表示以英雄为中心，找参照点的距离，在这个方向上距英雄几个格子距离的点，为参照点
		/// </summary>
		public int hero = 0; // 参照点距离
		
		/// <summary> 
		/// 可为空，以12点为1，顺时针，共计8个方向（1-8）
		/// </summary>
		public int fx2 = 0; // 方向
		
		/// <summary> 
		/// 可为空，参照点方向上的格子数量（连续）
		/// </summary>
		public int linenum = 0; // 格子数量
	
	

	} 

	// Defined in table: Globals
	
	public partial class cash
	{
	
		
		
		public string language = ""; // 语言地区
		
		
		public int pattern = 0; // 货币类型
		
		
		public float price = 0f; // 价格数值
	
	

	} 

	// Defined in table: Globals
	
	public partial class HireHeroLimit
	{
	
		
		/// <summary> 
		/// 雇佣任务用
		/// </summary>
		public int herocolor = 0; // 英雄品質
		
		
		public int weight = 0; // 權重
	
	

	} 

	// Defined in table: Globals
	
	public partial class Consumption
	{
	
		
		/// <summary> 
		/// 商店，限时购买中，商品筛选机制使用，配置与玩家等级配置表中
		/// </summary>
		public int id = 0; // 物品id
		
		
		public int value = 0; // 消费数值
	
	

	} 

	// Defined in table: Globals
	
	public partial class typeRandom
	{
	
		
		
		public int attrid = 0; // 属性id
		
		
		public int weight = 0; // 权重
	
	

	} 

	// Defined in table: Globals
	
	public partial class ValueRandom
	{
	
		
		/// <summary> 
		/// 如果对应的属性是固定值，则固定加成；如果对应的属性是比例值，则比例加成
		/// </summary>
		public int num = 0; // 属性数值
		
		
		public int weight = 0; // 权重
	
	

	} 

	// Defined in table: FightCommand
	[System.Serializable]
	public partial class FightCommandDefine
	{
	
		
		/// <summary> 
		/// {1}命令序数
		/// </summary>
		public int sort = 0; 
		
		/// <summary> 
		/// {1}命令描述文本；原则上不超过20个字
		/// </summary>
		public string text = ""; 
		
		/// <summary> 
		/// {1}加速倍数
		/// </summary>
		public int speed = 0; 
	
	

	} 

	// Defined in table: GoodsCommand
	[System.Serializable]
	public partial class GoodsCommandDefine
	{
	
		
		/// <summary> 
		/// {1}命令序数
		/// </summary>
		public int sort = 0; 
		
		/// <summary> 
		/// {1}命令描述文本；原则上不超过20个字；
		/// </summary>
		public string text = ""; 
		
		/// <summary> 
		/// {1}获得物品ID、获得物品数量； 注意： 1.物品类型：资产、装备，需要各自单独配置，即不可与其他类型物品在同一个数据格中混合配置； 2.经验，获得的数量不能为负，为负时不生效； 3.装备，涉及到带有唯一ID，原则上配置获得数量不能超过99
		/// </summary>
		public List<reward> parameter = new List<reward>(); 
	
	

	} 

	// Defined in table: HeroCommand
	[System.Serializable]
	public partial class HeroCommandDefine
	{
	
		
		/// <summary> 
		/// {1}命令序数
		/// </summary>
		public int sort = 0; 
		
		/// <summary> 
		/// {1}命令描述文本；原则上不超过20个字；涉及到带有唯一ID的物品，原则配置获得数量不能超过99，如英雄
		/// </summary>
		public string text = ""; 
		
		/// <summary> 
		/// {1}依次为英雄ID、英雄品质、英雄等级、英雄数量； 注意： 1.英雄品质、等级只能配置比初始值高；如果其中一项未填写，则按对应ID的默认数据输入； 2.英雄涉及到带有唯一ID，原则配置获得数量不能超过99
		/// </summary>
		public List<herodata> parameter = new List<herodata>(); 
	
	

	} 

	// Defined in table: TestSheet
	[System.Serializable]
	public partial class TestSheetDefine
	{
	
		
		/// <summary> 
		/// {1}命令序数
		/// </summary>
		public int sort = 0; 
		
		/// <summary> 
		/// {1}命令描述文本；原则上不超过20个字
		/// </summary>
		public string text = ""; 
		
		/// <summary> 
		/// {1}封印物ID
		/// </summary>
		public int sealwareId = 0; 
	
	

	} 

	// Defined in table: TestCommand
	[System.Serializable]
	public partial class TestCommandDefine
	{
	
		
		/// <summary> 
		/// {1}命令序数
		/// </summary>
		public int sort = 0; 
		
		/// <summary> 
		/// {1}命令描述文本；原则上不超过20个字
		/// </summary>
		public string text = ""; 
		
		/// <summary> 
		/// {1}跳转的关卡ID
		/// </summary>
		public int levelId = 0; 
	
	

	} 

	// Defined in table: LevelCommand
	[System.Serializable]
	public partial class LevelCommandDefine
	{
	
		
		/// <summary> 
		/// {1}命令序数
		/// </summary>
		public int sort = 0; 
		
		/// <summary> 
		/// {1}命令描述文本；原则上不超过20个字
		/// </summary>
		public string text = ""; 
		
		/// <summary> 
		/// {1}跳转的关卡ID
		/// </summary>
		public int levelId = 0; 
	
	

	} 

}
