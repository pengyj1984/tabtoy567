// Generated by github.com/davyxu/tabtoy
// DO NOT EDIT!!
// Version: 
using System;
using System.Collections.Generic;

namespace main
{ 	
	public enum ActorType
	{ 
		None = 0, //  
		Pharah = 1, // 法鸡 
		Junkrat = 2, // 狂鼠 
		Genji = 3, // 源氏 
		Mercy = 4, // 天使 
	}
		
	public partial class ExampleData : tabtoy.ITableSerializable
	{ 
		public Int32 ID = 0;
		public Int32 ID2 = 0;
		public string Name = string.Empty;
		public float Rate = 0;
		public double Accuracy = 0;
		public ActorType Type = ActorType.None;
		public List<Int32> Skill = new List<Int32>();
		public Int32 Buff = 0;
		public List<string> TagList = new List<string>();
		public List<Int32> Multi = new List<Int32>();
		
		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
				{ 
					case 0x20000:
                	{
						reader.ReadInt32( ref ID );
                	}
					break;
					case 0x20001:
                	{
						reader.ReadInt32( ref ID2 );
                	}
					break;
					case 0x80002:
                	{
						reader.ReadString( ref Name );
                	}
					break;
					case 0x70003:
                	{
						reader.ReadFloat( ref Rate );
                	}
					break;
					case 0xc0004:
                	{
						reader.ReadDouble( ref Accuracy );
                	}
					break;
					case 0xa0005:
                	{
						reader.ReadEnum( ref Type );
                	}
					break;
					case 0x660006:
                	{
						reader.ReadInt32( ref Skill );
                	}
					break;
					case 0x20007:
                	{
						reader.ReadInt32( ref Buff );
                	}
					break;
					case 0x6c0008:
                	{
						reader.ReadString( ref TagList );
                	}
					break;
					case 0x660009:
                	{
						reader.ReadInt32( ref Multi );
                	}
					break;
					
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	
	public partial class ExtendData : tabtoy.ITableSerializable
	{ 
		public float Additive = 0;
		public Int32 Index2 = 0;
		
		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
				{ 
					case 0x70000:
                	{
						reader.ReadFloat( ref Additive );
                	}
					break;
					case 0x20001:
                	{
						reader.ReadInt32( ref Index2 );
                	}
					break;
					
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	
	public partial class ExampleKV : tabtoy.ITableSerializable
	{ 
		public string ServerIP = string.Empty;
		public UInt16 ServerPort = 0;
		public List<Int32> GroupID = new List<Int32>();
		
		#region Deserialize Code
		public void Deserialize( tabtoy.TableReader reader )
		{
			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
 				switch (mamaSaidTagNameShouldBeLong)
				{ 
					case 0x80000:
                	{
						reader.ReadString( ref ServerIP );
                	}
					break;
					case 0x40001:
                	{
						reader.ReadUInt16( ref ServerPort );
                	}
					break;
					case 0x660002:
                	{
						reader.ReadInt32( ref GroupID );
                	}
					break;
					
                    default:
                    {
                        reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
                    }
                    break;
				}
			}
		}
		#endregion 
	}
	

	// Combine struct
	public partial class Table
	{ 
		// table: ExampleData
		public List<ExampleData> ExampleData = new List<ExampleData>(); 
		// table: ExtendData
		public List<ExtendData> ExtendData = new List<ExtendData>(); 
		// table: ExampleKV
		public List<ExampleKV> ExampleKV = new List<ExampleKV>(); 

		// Indices
		public Dictionary<Int32,ExampleData> ExampleDataByID = new Dictionary<Int32,ExampleData>();
		public Dictionary<Int32,ExampleData> ExampleDataByID2 = new Dictionary<Int32,ExampleData>();
		public Dictionary<Int32,ExtendData> ExtendDataByIndex2 = new Dictionary<Int32,ExtendData>();
		
		
		
		// table: ExampleKV
		public ExampleKV GetKeyValue_ExampleKV()
		{
			return ExampleKV[0];
		}

		public void ResetData( )
		{   
			ExampleData.Clear(); 
			ExtendData.Clear(); 
			ExampleKV.Clear();  
			ExampleDataByID.Clear();
			ExampleDataByID2.Clear();
			ExtendDataByIndex2.Clear();
				
		}
		
		public void Deserialize( tabtoy.TableReader reader )
		{	
			reader.ReadHeader();

			UInt32 mamaSaidTagNameShouldBeLong = 0;
            while ( reader.ReadTag(ref mamaSaidTagNameShouldBeLong) )
            {
				if (mamaSaidTagNameShouldBeLong == 0x6f0000)
				{
                    var tabName = string.Empty;
                    reader.ReadString(ref tabName);
					switch (tabName)
					{ 
						case "ExampleData":
						{
							reader.ReadStruct(ref ExampleData);	
						}
						break;
						case "ExtendData":
						{
							reader.ReadStruct(ref ExtendData);	
						}
						break;
						case "ExampleKV":
						{
							reader.ReadStruct(ref ExampleKV);	
						}
						break;
						default:
						{
							reader.SkipFiled(mamaSaidTagNameShouldBeLong);                            
						}
						break;
					}
				}
			}
		}

		public void IndexData( string tabName = "")
		{ 	
			if (tabName == "" || tabName == "ExampleData")
			{
				foreach( var kv in ExampleData )
				{
					ExampleDataByID[kv.ID] = kv;
				}
				
			}
				
			if (tabName == "" || tabName == "ExampleData")
			{
				foreach( var kv in ExampleData )
				{
					ExampleDataByID2[kv.ID2] = kv;
				}
				
			}
				
			if (tabName == "" || tabName == "ExtendData")
			{
				foreach( var kv in ExtendData )
				{
					ExtendDataByIndex2[kv.Index2] = kv;
				}
				
			}
			
		}
		
	}
}
